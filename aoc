#!python
import importlib
from enum import Enum
from os import mkdir
from pathlib import Path
from shutil import copy
from time import perf_counter_ns
from typing import cast

import typer

from src.solver import Solver

app = typer.Typer(
    help="Advent of Code 2022",
    add_completion=False,
)


class Part(str, Enum):
    part_a = "a"
    part_b = "b"


@app.command()
def solve(
    day: int = typer.Option(..., help="Day"),
    part: Part = typer.Option(..., help="Part", case_sensitive=False),
    test: bool = typer.Option(False, help="Run against the test case"),
) -> None:
    """
    Run a solution.
    """
    try:
        solution = cast(
            Solver, importlib.import_module(f"src.solutions.day{day}.{part}")
        )

        timer_start = perf_counter_ns()
        res = solution.test() if test else solution.run()
        timer_stop = perf_counter_ns()
        delta = timer_stop - timer_start

        result = typer.style(
            res,
            fg=typer.colors.GREEN,
            bold=True,
        )
        typer.echo(f"Solution: {result}")

        run_time = typer.style(
            f"{delta / 1000 ** 2} ms",
            fg=typer.colors.BRIGHT_CYAN,
            bold=True,
        )
        typer.echo(f"Run time: {run_time}")

    except ModuleNotFoundError:
        typer.echo(
            typer.style(
                f"No solution found for day #{day} and part {part}!",
                fg=typer.colors.BRIGHT_RED,
                bold=True,
            )
        )


@app.command()
def scaffold(day: int = typer.Option(..., help="Day")) -> None:
    """
    Scaffold a new solution
    """

    day_path = f"day{day}"
    solutions_path = Path("src") / "solutions" / day_path
    inputs_path = Path("src") / "inputs" / day_path
    template_path = Path("src") / "template.py"

    try:
        mkdir(solutions_path)
        mkdir(inputs_path)
    except FileExistsError:
        typer.echo(
            typer.style(
                f"Directories for day #{day} already exist.",
                fg=typer.colors.RED,
                bold=True,
            )
        )

        return

    copy(template_path, solutions_path / "a.py")
    copy(template_path, solutions_path / "b.py")

    (inputs_path / "a.txt").touch()
    (inputs_path / "b.txt").touch()
    (inputs_path / "a.test.txt").touch()
    (inputs_path / "b.test.txt").touch()

    typer.echo(typer.style(f"Day {day} scaffolded.", fg=typer.colors.GREEN, bold=True))


if __name__ == "__main__":
    app()
